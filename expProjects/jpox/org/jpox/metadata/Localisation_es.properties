################################################################################
# Copyright (c) 14-Jun-2004 Andy Jefferson and others.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the JPOX License v1.0
# which accompanies this distribution.
#
# Contributors :
#     ...
#
# Resources for org.jpox.metadata package (Spanish)
# Version : $Revision: 1.53.2.1 $
################################################################################
#
# Migrator Messages
#
MetaData.Migrator.Title=JPOX Meta-Data Migrator
MetaData.Migrator.Title.2=-----------------------
MetaData.Migrator.Help.Usage=Usage:  org.jpox.metadata.MetaDataMigrator [options] [jdo-files]
MetaData.Migrator.Help.Options.0=    donde [opciones] pueden ser :
MetaData.Migrator.Help.Options.1=    -indent {size}   : Numero de espacio en el 'indent'
MetaData.Migrator.Help.Options.2=    -v               : Encender verbose
MetaData.Migrator.Help.Options.3=    -help            : Esta información
MetaData.Migrator.NoFiles.Error=Usted na ha especificado ningun archivo de JDO MetaData
MetaData.Migrator.ProcessingFile=convertiendo archivo de Meta-Data {0} ... 
MetaData.Migrator.ProcessedFile= hecho.
MetaData.Migrator.IndentSize=Número de espacio en el 'indent' en el archivo de Meta-Data = {0}
MetaData.Migrator.ChangeExtensionTagToAttribute=Cambiando el extension tag {0} al attributo {1}
MetaData.Migrator.ChangeExtensionTagToElement=Cambiando el extension tag {0} al elemento {1}

#
# Parser Messages
#
MetaData.Parser.HandlerPluginNotFound=El plugin de MetaData handler "{0}" no existe en el CLASSPATH. Por favor compruebe el CLASSPATH y la especificaión de plugin.
MetaData.Parser.HandlerCreateError=Error creando handler del tipo "{0}" para analizar el MetaData : {1}
MetaData.Parser.ParseUsingHandler=Analizando el MetaData "{0}" con handler "{1}" (validar="{2}")

MetaData.Parser.NullFile=¡Intenta de analizar un archivo que era nulo!
MetaData.Parser.CannotOpenFileError=Error en abrir el archivo de Meta-Data "{0}"
MetaData.Parser.CannotReadInput=No puede leer Meta-Data input "{0}"

MetaData.Parser.StartElement=Empezando a analizar el elemento "{0}" (profundidad="{1}")
MetaData.Parser.EndElement=Terminando a analizar el elemento "{0}" (profundidad="{1}")
MetaData.Parser.InvalidParentTag.Error=El tag "{0}" no puede tener el tag padre "{1}" : debe ser {2}
MetaData.Parser.UnknownTag.Error=El tag es desconocido : "{0}"
MetaData.Parser.LineError=Error en el analizo del archivo "{0}" a la linea {1} : {2} - Por favor compruebe el DTD y la validad de este MetaData.
MetaData.Parser.ColumnError=Error en el analizo del archivo "{0}" a la linea {1}, columna {2} : {3} - Por favor compruebe el DTD y la validad de este MetaData.
MetaData.Parser.ErrorCause=Error en el analizo del archivo "{0}" tiene causa {1}
MetaData.Parser.ExpectedValueInAttribute=A value is expected in the attribute "{0}" for "{1}" in element "{2}". 

MetaData.RegisterClassWithoutMetaData=Registrando la clase "{0}" no tener Meta-Data
MetaData.DeregisterClassWithoutMetaData=Deregistrando la clase "{0}" no tener Meta-Data - ya vamos a añadir el Meta-Data

MetaData.AnnotationManagerNotFound=No hay un manager de annotaciones en el CLASSPATH asi que vamos a ignorar todas las annotaciones.

#
# File MetaData
#
MetaData.File.NotFoundForClassError=No hemos encontrado el MetaData del tipo "{0}" por la clase "{1}"
MetaData.File.NotFoundForClassAtLocationError=No encontramos el MetaData del tipo "{0}" por la clase "{1}" en {2}
MetaData.File.NotFoundForQueryAtLocationError=No encontramos el MetaData por la query {0} en {1}
MetaData.File.NotFoundForSequenceAtLocationError=No encontramos el MetaData por la secuencia {0} en {1}
MetaData.File.FoundClass=El MetaData del tipo "{0}" por la clase "{1}" sera {2}
MetaData.File.FoundQuery=El MetaData por la query {0} sera {1}
MetaData.File.FoundSequence=El MetaData por la secuencia {0} sera {1}
MetaData.File.ParseError=El analizo del archivo de MetaData {0} falló

#
# Package MetaData
#
MetaData.Package.NameNotSpecified=The package name in empty in MetaData file {1}.

#
# Class MetaData
#
MetaData.Class.NameNotSpecified=The package {0} has an empty MetaData specified for a class name. Please check the file {1}.
MetaData.Class.NotEnhancedError=Encontro el Meta-Data de la clase {0} pero la clase no esta analizado! Por favor, debes analizar la clase antes de usar JPOX.
MetaData.Class.AddingUnspecifiedField=Añadiendo el Meta-Data por el campo {0} de la clase {1} como no estaba en la definición de Meta-Data.
MetaData.Class.NameNotSpecified.Error=El elemento de Meta-Data "class" por package {0} necesita un 'name' attributo.

MetaData.Class.NonStaticInnerClassNotPersistable=La clase "{0}" esta especificada como PersistenceCapable pero es Inner y no es estatico. Clases asi no pueden ser PersistenceCapable.

MetaData.Class.SingleFieldIdentityUsed=La clase {0} va a usar "application identity" pero no hay "objectid-class" en la definición. JPOX va a usar to {1}
MetaData.Class.SingleFieldIdentityInvalid=La clase {0} va a usar "application identity", no hay "objectid-class" en la definición, pero hay {1} campos de primary-key. No podemos usar SingleFieldIdentity.
MetaData.Class.SingleFieldIdentityInvalidType=La clase {0} va a usar "application-identity", no hay "objectid-class" y hay un campo de PK , pero el campo es de un tipo invalido {1} por SingleFieldIdentity. Puede usar los tipos short, Short, int, Integer, long, Long, byte, Byte, char, Character, o String.

MetaData.Class.UsingDefaultClassLoaderResolver=No hay un class loader especificado por cargar las classes del MetaData de class {0}. Usando el default ClassLoader.
MetaData.Class.AlreadyPopulatedError=No puede popular la clase {0} como es populado
MetaData.Class.NotInitialisedError=El Meta-Data no ha sido inicializado por la clase {0}.
MetaData.Class.NotPopulatedError=El Meta-Data no ha sido populado por la clase {0}.
MetaData.Class.DeclaredFieldNotFoundError=¡La clase {0} tiene campo {1} definido en el MetaData, pero este campo no existe en la clase!
MetaData.Class.PopulatingMetaData=Populating Meta-Data for class {0}.
MetaData.Class.InitialisingMetaData=Initialising Meta-Data for class {0}.

MetaData.Class.PrimaryKeyNotSpecifiedError=La clase {0} ha sido definido con el object-id class {1} pero no hay ningun campo como "primary key". Por favor debes anotar con el tag "primary-key" los campos usar como parte de la llave primaria
MetaData.Class.PrimaryKeyFieldsFoundButNotUsingApplicationIdentity=Class {0} has been specified with {1} primary key fields, but this class is using {2} identity and should be application identity.

MetaData.Class.ObjectIdClass.ClassNotFoundError=La clase {0} ha sido definido con el object-id class {1}. La clase no existe. Por favor, compruebe el especficación o CLASSPATH.
MetaData.Class.ClassNotFoundError=La clase {0} tiene MetaData pero la clase no existe. Por favor compruebe la especificación de CLASSPATH.
MetaData.Class.PersistenceCapableSuperclass.NotFoundError=La clase {0} ha sido definido con un persistence-capable-superclass {1} pero no existe.
MetaData.Class.PersistenceCapableSuperclass.IsNotSuperclassError=La clase {0} ha sido definido con un persistence-capable-superclass {1} que no es un superclass de esa clase.
MetaData.Class.PersistenceCapableSuperclass.IsNotPCError=La clase {0} ha sido definido con un persistence-capable-superclass {1} que no es Persistence-Capable (no hay Meta-Data).
MetaData.Class.PersistenceCapableSuperclass.ObjectIdClassSpecifiedError=La clase {0} ha sido definido con un persistence-capable-superclass {1} pero tiene un objectid-class tambien. No debe poner objectid-class porque va a usar la clase de objectid de la superclase siempre.
MetaData.Class.PersistenceCapableSuperclass.InvalidDefinition=The persistence-capable-superclass for class {0} must be class {1}, NOT class {2}.
MetaData.Class.PersistenceCapableSuperclass.ClassNotFoundError=The persistence-capable-superclass {1} for class {0} cant be found. Please check your CLASSPATH specifications.
MetaData.Class.PersistenceCapableSuperclass.Set=JPOX ha puesto un valor de persistence-capable-superclass "{1}" por la clase "{0}"; no tenia valor en el MetaData.
MetaData.Class.DuplicateFieldError=La clase {0} ya tiene un campo con el nombre {1}.

MetaData.Class.Inheritance.NoSuperclassError=La clase {0} tiene una estrategia de heredar de SUPERCLASS, pero no hay una superclase!
MetaData.Class.Inheritance.SuperclassNoTableError=La clase {0} tiene que usar la tabla de la superclase, pero la superclase ({1}) tiene que usar la tabla de esta clase!
MetaData.Class.NoSuperclassYetSuperclassIsPC=La clase "{0}" no tiene un persistence-capable-superclass, pero tiene una superclase "{1}" que ES PersistenceCapable. Corrigalo por favor.
MetaData.Class.UsePoidGeneratorDeprecated=La clase "{0}" tiene el atributo "use-poid-generator". Ya no lo apoyamos. Usted debe usar el atributo "value-strategy" de <field> por todos los campos que necesita un valor poniendo.

MetaData.Class.IdentityTypeNotEqualsSuperClassIdentityType=El tipo de identidad en la clase "{0}" no es lo mismo que el tipo de identidad en la superclase.
MetaData.Class.IdentityStrategyNotEqualsSuperClassIdentityStrategy=La estrategia de Datastore-identity en la clase "{0}" ("{1}") no es la misma que la estrategia de Datastore-Identity en la superclase ("{2}").

#
# Implements
#
MetaData.Implements.ClassNotFoundError=Class {0} has MetaData with implements {1} yet the class cant be found. Please check your CLASSPATH specifications.

#
# Inheritance
#
MetaData.Class.InheritanceStrategyInvalidError=La clase {0} tiene una estrategia de heredar de "{1}" pero apoyamos "{2}" solamente.
MetaData.Class.Inheritance.NoSuperclassError=La clase {0} tiene una estrategia de heredar de "superclass-table", pero no superclase existe o no existe con propia tabla
MetaData.Class.Inheritance.NoSuperclassDiscriminator=La clase {0} tiene una estrategia de heredar de "superclass-table", usando la tabla {1}, pero esa clase no tiene un discriminador.
MetaData.Class.Inheritance.NoSuperclassDiscriminatorColumn=La clase {0} tiene una estrategia de heredar de "superclass-table", usando la tabla {1}, pero esa clase no tiene una columna de discriminador
MetaData.Class.Inheritance.NoDiscriminatorValue=La clase {0} tiene una estrategia de heredar usando la tabla de clase {1} con la columna de discriminador {2}. Esta clase no tiene un valor de discriminador
MetaData.Class.Inheritance.NoDiscriminatorValueForValueMap=La clase {0} usa la estrategia de discriminación de "value-map" pero no tiene valor. Vamos a usar el nombre de la clase!

#
# Field MetaData
#
MetaData.Field.UsingSystemClassLoader=No hay un cargador de clases definido para cargar las clases con el MetaData por campo "{0}" de clase "{1}". Va a usar el cargador de clases del sistema.
MetaData.Field.PopulateWithNullFieldError=No puede popular el campo "{0}" de la clase "{1}" con un campo nulo.
MetaData.Field.AlreadyPopulatedError=No puede popular el campo "{0}" de la clase "{1}" no ya ha sido populado.
MetaData.Field.AlreadyInitialisedError=No puede cambiar el campo "{0}" de la clase "{1}" porque ya ha sido inicializado.
MetaData.Field.NotPersistentWithIllegalAttributesError=Error en el MetaData por el campo "{0}" de la clase "{1}" : es definido como {2} con "persistence-modifier={3}" pero tiene "default-fetch-group=true" o "primary-key=true" definido! Deben ser falsos.
MetaData.Field.InvalidArrayType=No podemos persistir el campo "{0}" de la clase {1} porque es de un tipo de array que JPOX no apoya. Por favor, debe cambiarlo por una colección.
MetaData.Field.DuplicateField=El campo "{0}" ya existe en la clase "{1}", pero tiene otra definición.
MetaData.Field.ClassNameInvalid=La clase "{0}" tiene campo "{1}" como de la clase "{2}" pero no hemos encontrado esta clase
MetaData.Field.ClassNotSuperclass=La clase "{0}" tiene campo "{1}" como de la clase "{2}" pero no es una superclase! Usted puede usar solamente los campos de las superclases que son PersistenceCapable.
MetaData.Field.MappedByInvalid=La clase "{0}" tiene campo "{2}" con "mapped-by" de "{2}". Este campo no existe en el otro lado de la relación ("{3}")!!
MetaData.Field.ImplementationClassInvalid=La clase "{0}" tiene campo "{1}" con "implementation-classes" pero la clase de implementación "{2}" no existe!!
MetaData.Field.PopulateWithWrongValue=Cannot populate the field "{0}" of the class "{1}" with a the value "{2}" for the property "{3}".

#
# Column MetaData
#
MetaData.Column.InvalidJDBCType=Una columna tiene el jdbc-type de "{0}". Es invalido. El jdbc-type no existe en la lista de la clase java.sql.Types class, o JPOX no lo apoya.

#
# Embedded MetaData
#
MetaData.Embedded.PC.UnsupportedType=El campo "{0}" tiene tipo "{1}" pero es "embedded". JPOX no apoya usar este tipo como "embedded". El tipo del campo tiene que ser PersistenceCapable.
MetaData.Embedded.Collection.UnsupportedType=El campo "{0}" es una collección de elementos de tipo "{1}" pero es "embedded". JPOX no apoya usar este tipo como "embedded". El tipo del campo tiene que ser PersistenceCapable.
MetaData.Embedded.MapKey.UnsupportedType=El campo "{0}" es una mapa con llaves de tipo "{1}" pero la llave es "embedded". JPOX no apoya usar este tipo como "embedded". El tipo del campo tiene que ser PersistenceCapable.
MetaData.Embedded.MapValue.UnsupportedType=El campo "{0}" es una mapa con valores de tipo "{1}" pero el valor es "embedded". JPOX no apoya usar este tipo como "embedded". El tipo del campo tiene que ser PersistenceCapable.
MetaData.Embedded.AddingUnspecifiedField=Añadiendo el Meta-Data por el campo "{0}" de la clase "{1}" "embedded" en la clase "{2}" como no estaba en la definición de <embedded> Meta-Data.
MetaData.Embedded.Collection.NoJoinTable=El campo "{0}" es una collección de elementos de tipo "{1}" como "embedded". No hay ningun <join>. Usted necesita poner un <join>, porque los elementos van a estar almacenado alli.
MetaData.Embedded.MapKey.NoJoinTable=El campo "{0}" es una mapa de llaves de tipo "{1}" como "embedded". No hay ningun <join>. Usted necesita poner un <join>, porque las llaves van a estar almacenado alli.
MetaData.Embedded.MapValue.NoJoinTable=El campo "{0}" es una mapa de valores de tipo "{1}" como "embedded". No hay ningun <join>. Usted necesita poner un <join>, porque los valores van a estar almacenado alli.

#
# Join MetaData
#
MetaData.Join.TableNotValidWithinField=El campo "{0}" tiene <join table="...">. El atributo "table" no tiene sentido cuando <join> esta dentro de <field>. En este caso usted debe poner "table" en <field>.

#
# Collection MetaData
#
MetaData.Collection.IsNotCollectionError=El campo "{0}" de la clase "{1}" ha sido definido con el "collection" MetaData pero no es un campo de Collection.
MetaData.Collection.ElementTypeNotSpecifiedError=¡El campo "{0}" de la clase "{1}" ha sido definido como Collection pero el tipo de elemento no ha sido definido!
MetaData.Collection.ElementTypeNotFoundError=El campo "{0}" de la clase "{1}" ha sido definido como Collection con elementos de tipo {2}. ¡Este tipo de elemento no existe!
MetaData.Collection.ElementTypeResolved=El campo "{0}" de la clase "{1}" ha sido definido como Collection con elementos de tipo {2}. Este tipo ha sido resuelto a  {3}
MetaData.Collection.NonPCWithoutJoin=El campo "{0}" es una collección de (non-serializado) elementos de tipo "{1}" pero no tiene ningun <join>. Para almacenar una collección asi necesita una tabla de juntar, o marcarlo como "serialized".

#
# Array MetaData
#
MetaData.Array.IsNotArrayError=El campo "{0}" de la clase "{1}" ha sido definido con "array" MetaData pero no es un campo de array.
MetaData.Array.NonPCWithoutJoin=El campo "{0}" es una matriz de (non-serializado) elementos de tipo "{1}" pero no tiene ningun <join>. Para almacenar una matriz asi necesita una tabla de juntar, o marcarlo como "serialized".

#
# Map MetaData
#
MetaData.Map.IsNotMapError=El campo "{0}" de la clase "{1}" ha sido definido con "map" MetaData pero no es un campo de Map.
MetaData.Map.KeyTypeNotSpecifiedError=¡El campo "{0}" de la clase "{1}" ha sido definido como Map pero el tipo de key no ha sido definido!
MetaData.Map.KeyTypeNotFoundError=El campo "{0}" de la clase "{1}" ha sido definido como Map con keys del tipo {2}. ¡Este tipo de key no existe!
MetaData.Map.KeyTypeResolved=El campo "{0}" de la clase "{1}" ha sido definido como Map con keys de tipo {2}. Este tipo de key ha sido resuelto a {3}.
MetaData.Map.ValueTypeNotSpecifiedError=El campo "{0}" de la clase "{1}" ha sido definido como Map pero el tipo de value no ha sido definido!
MetaData.Map.ValueTypeNotFoundError=El campo "{0}" de la clase {1} ha sido definido como Map con values del tipo {2}. ¡Este tipo de value no existe!
MetaData.Map.ValueTypeResolved=El campo "{0}" de la clase "{1}" ha sido definido como Map con values del tipo {2}. Este tipo de value ha sido resuelto a {3}.
MetaData.Map.KeyTypeReferenceCannotBeEmbedded=El campo "{0}" tiene key-type como "{1}" que es tipo de referencia, y tiene "embedded". JPOX no apoya el uso de un tipo de referencia con "embedded".
MetaData.Map.ValueTypeReferenceCannotBeEmbedded=El campo "{0}" tiene value-type como "{1}" que es tipo de referencia, y tiene "embedded". JPOX no apoya el uso de un tipo de referencia con "embedded".

#
# Query MetaData
#
MetaData.Query.QueryNameNotSpecifiedError=¡Query no tiene un nombre ! Por favor, cada Query necesita un nombre.

#
# Sequence MetaData
#
MetaData.Sequence.SequenceNameNotSpecifiedError=¡Sequence no tiene un nombre ! Por favor, cada Sequence necesita un nombre.

#
# Version MetaData
#
MetaData.Version.StrategyNotSpecifiedError=La estratagia no esta !

#
# Identity MetaData
#
MetaData.Identity.StrategyNotSpecifiedError=La estratagia no esta !
MetaData.Identity.FactoryClassNotFound=El factory-class {0} no esta !
MetaData.Identity.FactoryClassIsNotIdGenerator=El factory-class {0} no hace javax.jdo.IdGenerator !

#
# Extendable MetaData
#
MetaData.Extendable.Invalid=La especificación del tag de <extension> no esta correcta. El vendor-name ({0}), key ({1}) y value ({2}) deben ser especificados.


MetaData.Reference.NoImplementationClassesFound=El campo "{0}" esta declarado como referencia ("interface" o java.lang.Object) but no hay clases de implementación de "{1}"
